package model.Auxiliary;

public class TabularData {
    // Нормированная функция Лапласа F(x)
//_____________________________________________________________________________________________________________________________________________________
    //сотые доли для x  |   0   |     1    |    2     |     3    |     4    |     5    |     6    |     7    |     8    |     9    | /| x |
    public static final double[] F = {0.0000, 0.0040, 0.0080, 0.0120, 0.0160, 0.0199, 0.0239, 0.0279, 0.0319, 0.0359,//|0,0|
            0.0398, 0.0438, 0.0478, 0.0517, 0.0557, 0.0596, 0.0636, 0.0675, 0.0714, 0.0753,//|0,1|
            0.0798, 0.0832, 0.0871, 0.0910, 0.0948, 0.0987, 0.1026, 0.1064, 0.1103, 0.1141,//|0,2|
            0.1179, 0.1217, 0.1255, 0.1293, 0.1331, 0.1368, 0.1406, 0.1443, 0.1480, 0.1517,//|0,3|
            0.1554, 0.1591, 0.1628, 0.1664, 0.1700, 0.1736, 0.1772, 0.1808, 0.1844, 0.1879,//|0,4|
            0.1915, 0.1950, 0.1985, 0.2019, 0.2054, 0.2088, 0.2123, 0.2157, 0.2190, 0.2224,//|0,5|
            0.2257, 0.2291, 0.2324, 0.2357, 0.2389, 0.2422, 0.2454, 0.2486, 0.2517, 0.2549,//|0,6|
            0.2580, 0.2611, 0.2642, 0.2673, 0.2703, 0.2734, 0.2764, 0.2794, 0.2823, 0.2852,//|0,7|
            0.2881, 0.2910, 0.2939, 0.2967, 0.2995, 0.3023, 0.3051, 0.3078, 0.3106, 0.3133,//|0,8|
            0.3159, 0.3186, 0.3212, 0.3238, 0.3264, 0.3289, 0.3315, 0.3340, 0.3365, 0.3389,//|0,9|
            0.3413, 0.3437, 0.3461, 0.3485, 0.3508, 0.3583, 0.3554, 0.3577, 0.3599, 0.3621,//|1,0|
            0.3643, 0.3665, 0.3686, 0.3708, 0.3729, 0.3749, 0.3770, 0.3790, 0.3810, 0.3830,//|1,1|
            0.3849, 0.3869, 0.3888, 0.3907, 0.3925, 0.3944, 0.3962, 0.3980, 0.3997, 0.4015,//|1,2|
            0.4032, 0.4049, 0.4066, 0.4082, 0.4099, 0.4115, 0.4131, 0.4147, 0.4162, 0.4177,//|1,3|
            0.4192, 0.4207, 0.4222, 0.4236, 0.4251, 0.4265, 0.4279, 0.4292, 0.4306, 0.4319,//|1,4|
            0.4332, 0.4345, 0.4357, 0.4370, 0.4382, 0.4394, 0.4406, 0.4418, 0.4429, 0.4441,//|1,5|
            0.4452, 0.4463, 0.4474, 0.4484, 0.4495, 0.4505, 0.4515, 0.4525, 0.4535, 0.4545,//|1,6|
            0.4554, 0.4564, 0.4573, 0.4582, 0.4591, 0.4599, 0.4608, 0.4616, 0.4625, 0.4633,//|1,7|
            0.4641, 0.4649, 0.4656, 0.4664, 0.4671, 0.4678, 0.4686, 0.4693, 0.4699, 0.4706,//|1,8|
            0.4713, 0.4719, 0.4726, 0.4732, 0.4738, 0.4744, 0.4750, 0.4756, 0.4761, 0.4767,//|1,9|
            0.4772, 0.4778, 0.4783, 0.4788, 0.4793, 0.4798, 0.4803, 0.4808, 0.4812, 0.4817,//|2,0|
            0.4821, 0.4826, 0.4830, 0.4834, 0.4838, 0.4842, 0.4846, 0.4850, 0.4854, 0.4857,//|2,1|
            0.4860966, 0.4864474, 0.4867906, 0.4871263, 0.4874545, 0.4877755, 0.4880894, 0.4883962, 0.4886962, 0.4889893,//|2,2|
            0.4892759, 0.4895559, 0.4898296, 0.4900969, 0.4903581, 0.4906133, 0.4908625, 0.4911060, 0.4913437, 0.4915758,//|2,3|
            0.4918025, 0.4920237, 0.4922397, 0.4924506, 0.4926564, 0.4928572, 0.4930531, 0.4932493, 0.4934309, 0.4936128,//|2,4|
            0.4937903, 0.4939634, 0.4941323, 0.4942969, 0.4944574, 0.4946139, 0.4947664, 0.4949151, 0.4950600, 0.4952012,//|2,5|
            0.4953388, 0.4954729, 0.4956035, 0.4957308, 0.4958547, 0.4959754, 0.4960930, 0.4962074, 0.4963189, 0.4964274,//|2,6|
            0.4965330, 0.4966358, 0.4967359, 0.4968333, 0.4969280, 0.4970202, 0.4971099, 0.4971972, 0.4972821, 0.4973646,//|2,7|
            0.4974449, 0.4975229, 0.4975988, 0.4976726, 0.4977443, 0.4978140, 0.4978818, 0.4979476, 0.4980116, 0.4980738,//|2,8|
            0.4981342, 0.4981929, 0.4982498, 0.4983052, 0.4983589, 0.4984111, 0.4984618, 0.4985110, 0.4985588, 0.4986051,//|2,9|
            0.4986501, 0.4986938, 0.4987361, 0.4987772, 0.4988171, 0.4988558, 0.4988933, 0.4989297, 0.4989650, 0.4989992,//|3,0|
            0.4990324, 0.4990646, 0.4990957, 0.4991260, 0.4991553, 0.4991836, 0.4992112, 0.4992378, 0.4992636, 0.4992886,//|3,1|
            0.4993129, 0.4993363, 0.4993590, 0.4993810, 0.4994024, 0.4994230, 0.4994429, 0.4994623, 0.4994810, 0.4994991,//|3,2|
            0.4995166, 0.4995335, 0.4995499, 0.4995658, 0.4995811, 0.4995959, 0.4996103, 0.4996242, 0.4996376, 0.4996505,//|3,3|
            0.4996631, 0.4996752, 0.4996869, 0.4996982, 0.4997091, 0.4997197, 0.4997299, 0.4997398, 0.4997493, 0.4997585,//|3,4|
            0.4997674, 0.4997759, 0.4997842, 0.4997922, 0.4997999, 0.4998074, 0.4998146, 0.4998215, 0.4998282, 0.4998347,//|3,5|
            0.4998409, 0.4998469, 0.4998527, 0.4998583, 0.4998637, 0.4998689, 0.4998739, 0.4998787, 0.4998834, 0.4998879,//|3,6|
            0.4998922, 0.4998964, 0.4999004, 0.4999043, 0.4999080, 0.4999116, 0.4999150, 0.4999184, 0.4999216, 0.4999247,//|3,7|
            0.4999274, 0.4999305, 0.4999333, 0.4999359, 0.4999385, 0.4999409, 0.4999433, 0.4999456, 0.4999478, 0.4999499,//|3,8|
            0.4999519, 0.4999539, 0.4999557, 0.4999575, 0.4999593, 0.4999609, 0.4999625, 0.4999641, 0.4999655, 0.4999670,//|3,9|
            0.4999683, 0.4999696, 0.4999709, 0.4999721, 0.4999733, 0.4999744, 0.4999755, 0.4999765, 0.4999775, 0.4999784,//|4,0|
            0.4999793, 0.4999802, 0.4999811, 0.4999819, 0.4999826, 0.4999834, 0.4999841, 0.4999848, 0.4999854, 0.4999861,//|4,1|
            0.4999867, 0.4999872, 0.4999878, 0.4999883, 0.4999888, 0.4999893, 0.4999898, 0.4999902, 0.4999907, 0.4999911,//|4,2|
            0.4999915, 0.4999918, 0.4999922, 0.4999925, 0.4999929, 0.4999932, 0.4999935, 0.4999938, 0.4999941, 0.4999943,//|4,3|
            0.4999946, 0.4999948, 0.4999951, 0.4999953, 0.4999955, 0.4999957, 0.4999959, 0.4999961, 0.4999963, 0.4999964,//|4,4|
            0.4999966, 0.4999968, 0.4999969, 0.4999971, 0.4999972, 0.4999973, 0.4999974, 0.4999976, 0.4999977, 0.4999978,//|4,5|
            0.4999997,};                                                                                                 //|5,0|
//_____________________________________________________________________________________________________________________________________________________|

    //________________________________________________________________________________________________________________________________________________________________________
    //вероятность P(Z>Zq)   | 0,99  | 0,98  |  0,95 | 0,90 | 0,80 | 0,70 | 0,50 | 0,30| 0,20 | 0,10| 0,05| 0,02| 0,01|0,005|0,002| 0,001| / |степени свободы(k)|
    public static final double[][] Zq = {{0.00016, 0.0006, 0.0039, 0.016, 0.064, 0.148, 0.455, 1.07, 1.64, 2.7, 3.8, 5.4, 6.6, 7.9, 9.5, 10.83},//| 1                |
            {0.020, 0.040, 0.103, 0.211, 0.446, 0.713, 1.386, 2.41, 3.22, 4.6, 6.0, 7.8, 9.2, 11.6, 12.4, 13.8},//| 2                |
            {0.115, 0.185, 0.352, 0.584, 1.005, 1.424, 2.366, 3.66, 4.64, 6.3, 7.8, 9.8, 11.3, 12.8, 14.8, 16.3},//| 3                |
            {0.30, 0.43, 0.71, 1.06, 1.65, 2.19, 3.36, 4.9, 6.0, 7.8, 9.5, 11.7, 13.3, 14.9, 16.9, 18.5},//| 4                |
            {0.55, 0.75, 1.14, 1.61, 2.34, 3.00, 4.35, 6.1, 7.3, 9.2, 11.1, 13.4, 15.1, 16.3, 18.9, 20.5},//| 5                |
            {0.87, 1.13, 1.63, 2.20, 3.07, 3.83, 5.35, 7.2, 8.6, 10.6, 12.6, 15.0, 16.8, 18.6, 20.7, 22.5},//| 6                |
            {1.24, 1.56, 2.17, 2.83, 3.82, 4.67, 6.35, 8.4, 9.8, 12.0, 14.1, 16.6, 18.5, 20.3, 22.6, 24.3},//| 7                |
            {1.65, 2.03, 2.73, 3.49, 4, 59, 5.53, 7.34, 9.5, 11.0, 13.4, 15.5, 18.2, 20.1, 21.9, 24.3, 26.1},//| 8                |
            {2.09, 2.53, 3.32, 4.17, 5.38, 6.39, 8.34, 10.7, 12.2, 14.7, 16.9, 19.7, 21.7, 23.6, 26.1, 27.9},//| 9                |
            {2.56, 3.06, 3.94, 4.86, 6.18, 7.27, 9.34, 11.8, 13.4, 16.0, 18.3, 21.2, 23.2, 25.2, 27.7, 29.6},//| 10               |
            {3.1, 3.6, 4.6, 5.6, 7.0, 8.1, 10.3, 12.9, 14.6, 17.3, 19.7, 22.6, 24.7, 26.8, 29.4, 31.3},//| 11               |
            {3.6, 4.2, 5.2, 6.3, 7.8, 9.0, 11.3, 14.0, 15.8, 18.5, 21.0, 24.1, 26.2, 28.3, 31.0, 32.9},//| 12               |
            {4.1, 4.8, 5.9, 7.0, 8.6, 9.9, 12.3, 15.1, 17.0, 19.8, 22.4, 25.5, 27.7, 29.8, 32.5, 34.5},//| 13               |
            {4.7, 5.4, 6.6, 7.8, 9.5, 10.8, 13.3, 16.2, 18.2, 21.1, 23.7, 26.9, 29.1, 31.0, 34.0, 36.1},//| 14               |
            {5.2, 6.0, 7.3, 8.5, 10.3, 11.7, 14.3, 17.3, 19.3, 22.3, 25.0, 28.3, 30.6, 32.5, 35.5, 37.7},//| 15               |
            {5.8, 6.6, 8.0, 9.3, 11.2, 12.6, 15.3, 18.4, 20.5, 23.5, 26.3, 29.6, 32.0, 34.0, 37.0, 39.2},//| 16               |
            {6.4, 7.3, 8.7, 10.1, 12.0, 13.5, 16.3, 19.5, 21.6, 24.8, 27.6, 31.0, 33.4, 35.5, 38.5, 40.8},//| 17               |
            {7.0, 7.9, 9.4, 10.9, 12.9, 14.4, 17.3, 20.6, 22.8, 26.0, 28.9, 32.3, 34.8, 37.0, 40.0, 42.3},//| 18               |
            {7.6, 8.6, 10.1, 11.7, 13.7, 15.4, 18.3, 21.7, 23.9, 27.2, 30.1, 33.7, 36.2, 38.5, 41.5, 43.8},//| 19               |
            {8.3, 9.2, 10.9, 12.4, 14.6, 16.3, 19.3, 22.8, 25.0, 28.4, 31.4, 35.0, 37.6, 40.0, 43.0, 45.3},//| 20               |
            {8.9, 9.9, 11.6, 13.2, 15.4, 17.2, 20.3, 23.9, 26.2, 29.6, 32.7, 36.3, 38.9, 41.5, 44.5, 46.8},//| 21               |
            {9.5, 10.6, 12.3, 14.0, 16.3, 18.1, 21.3, 14.9, 27.3, 30.8, 33.9, 37.7, 40.3, 42.5, 46.0, 48.3},//| 22               |
            {10.2, 11.3, 13.1, 14.8, 17.2, 19.0, 22.3, 26.0, 28.4, 32.0, 35.2, 39.0, 41.6, 44.0, 47.5, 49.7},//| 23               |
            {10.9, 12.0, 13.8, 15.7, 18.1, 19.9, 23.3, 27.1, 29.6, 33.2, 36.4, 40.3, 43.0, 45.5, 48.5, 51.2},//| 24               |
            {11.5, 12.7, 14.6, 16.5, 18.9, 20.9, 24.3, 28.1, 30.7, 34.4, 37.7, 41.6, 44.3, 47.0, 50.0, 52.6},//| 25               |
            {12.2, 13.4, 15.4, 17.3, 19.8, 21.8, 25.3, 29.3, 31.8, 35.6, 38.9, 42.9, 45.6, 48.0, 51.5, 54.1},//| 26               |
            {12.9, 14.1, 16.2, 18.1, 20.7, 22.7, 26.3, 30.3, 32.9, 36.7, 40.1, 44.1, 47.0, 49.5, 53.0, 55.5},//| 27               |
            {13.6, 14.8, 16.9, 18.9, 21.6, 23.6, 27.3, 31.4, 34.0, 37.9, 41.3, 45.4, 48.3, 51.0, 54.5, 56.9},//| 28               |
            {14.3, 15.6, 17.7, 19.8, 22.5, 24.6, 28.3, 32.5, 35.1, 39.1, 42.6, 46.7, 49.6, 52.5, 56.0, 58.3},//| 29               |
            {15.0, 16.3, 18.5, 20.6, 23.4, 25.5, 29.3, 33.5, 36.3, 40.3, 43.8, 48.0, 50.9, 54.0, 57.5, 59.7},};//30               |
//________________________________________________________________________________________________________________________________________________________________________|

    public static double getF(double x) {
        double result;
        double x0 = Math.abs(x);
        int i = (int) (x0 * 100);
        double x1 = i / 100d;
        double x2 = x1 + 0.01;
        if (500 <= i) {
            result = F[460];
        } else if ((459 <= i) && (i < 500)) {
            i = 459;
            x1 = 4.59;
            x2 = 5.0;
            if (x0 != x1) result = (F[i] + ((x0 - x1) / (x2 - x1)) * (F[i + 1] - F[i]));
            else result = F[i];
        } else if (x0 != x1) result = (F[i] + ((x0 - x1) / (x2 - x1)) * (F[i + 1] - F[i]));
        else result = F[i];
        if (x >= 0) return result + 0.5;
        else return 0.5 - result;
    }

    public static double checkingForNormalCurve(double Z, int k) {
        double levelTovalue = -1;
        for (int i = 15; i >= 0; i--) {
            if (Z <= Zq[k - 4][i]) levelTovalue = i;
        }
        if (levelTovalue != -1) {
            if (levelTovalue == 0) levelTovalue = 0.99;
            if (levelTovalue == 1) levelTovalue = 0.98;
            if (levelTovalue == 2) levelTovalue = 0.95;
            if (levelTovalue == 3) levelTovalue = 0.90;
            if (levelTovalue == 4) levelTovalue = 0.80;
            if (levelTovalue == 5) levelTovalue = 0.70;
            if (levelTovalue == 6) levelTovalue = 0.50;
            if (levelTovalue == 7) levelTovalue = 0.30;
            if (levelTovalue == 8) levelTovalue = 0.20;
            if (levelTovalue == 9) levelTovalue = 0.10;
            if (levelTovalue == 10) levelTovalue = 0.05;
            if (levelTovalue == 11) levelTovalue = 0.02;
            if (levelTovalue == 12) levelTovalue = 0.01;
            if (levelTovalue == 13) levelTovalue = 0.005;
            if (levelTovalue == 14) levelTovalue = 0.002;
            if (levelTovalue == 15) levelTovalue = 0.001;
        }
        return levelTovalue;
    }
}
